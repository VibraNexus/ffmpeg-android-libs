name: Build FFmpeg Android Libraries

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Android NDK r28+
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r28b

      - name: Export NDK path
        run: echo "ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}" >> $GITHUB_ENV


      - name: Install CMake and build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential
      

      - name: Fetch FFmpeg sources
        run: |
          git clone https://github.com/FFmpeg/FFmpeg.git ffmpeg

      - name: Build for each ABI
        run: |
          ABIS=(arm64-v8a armeabi-v7a)
          for ABI in "${ABIS[@]}"; do
            echo "=== Building for $ABI ==="
            BUILD_DIR=build_$ABI
            rm -rf "$BUILD_DIR"
            mkdir "$BUILD_DIR" && cd "$BUILD_DIR"

            cmake .. \
              -G "Unix Makefiles" \
              -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
              -DANDROID_PLATFORM=android-21 \
              -DCMAKE_SYSTEM_VERSION=21          # force API 21
              -DMAX_PAGE_SIZE=16384 \
              -DANDROID_ABI=$ABI \
              -DCMAKE_BUILD_TYPE=Release

            cmake --build . -- -j$(nproc) VERBOSE=1

            cd ..
          done

      - name: Verify 16 KB page alignment
        run: |
          echo "Verifying ELF p_align for 16 KB support…"
          failed=false
          for DIR in build_arm64-v8a build_armeabi-v7a; do
            for so in $DIR/output/*/*.so; do
              echo "→ $so"
              readelf -l "$so" | grep LOAD | sed 's/^/   /'
              bad=$(readelf -l "$so" \
                | awk '/^ *LOAD/ {hdr=$0; getline; if ($NF!="0x4000") print hdr "\n" $0}')
              if [ -n "$bad" ]; then
                echo "::error ::Misaligned segments in $so:"
                echo "$bad" | sed 's/^/    /'
                failed=true
              else
                echo "  ✅ OK"
              fi
            done
          done
          $([[ $failed = true ]] && exit 1 || exit 0)

      - name: Upload .so artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ffmpeg-libs
          path: |
            build_arm64-v8a/output/*.so
            build_armeabi-v7a/output/*.so
